//
//  Math.swift
//  Swift5Demo
//
//  Created by 阿永 on 2022/7/20.
//  Copyright © 2022 com.ayong.myapp. All rights reserved.
//

import Foundation

//MARK: - 数据结构
/*
 按逻辑结构分类：
 1、集合
 2、线性结构
   一维数组
   队列
   栈
 3、非线性数据结构
    树、图、多维数组
 
 按存储结构分类：
 数据结构在计算机中的表示，是按照真实的物理地址分类。
  顺序存储结构
  链式存储结构
  索引存储结构
  散列存储结构
 
 */

//MARK: - 算法
/*
 可以分为以下几类：
 
 分治法：递归，将大问题分解成小问题（子问题相互独立，且与原问题重复
 动态规划法： 递归，子问题不独立
 贪心法：局部最优，根据当前信息做选择
 回溯法：通用的解题法，解空间树，找出满足条件的所有解
 分支界限法：解空间（广度优先，最小消耗优先），界限函数（队列式）
 概率算法：随机性选择，小概率错误，
 近似算法：求近似解，定义容错界
 
 */

//MARK: - 复杂度
/*
 时间复杂度和空间复杂度
 
 常用时间复杂度：
 O(1)，哈希查找
 O(n),单层循环
 O(lgn) 二分法，将数据集成分两半
 O(nlgn) 归并排序
 O(n²)，双重循环
 O(n³)，三层循环。
 O(2^n)，穷举查找，检查所有子集。
 O(n!)，菲波那切数列
 
 */

//MARK: - 内存
/*
 栈区(stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构的栈。

 堆区(heap)：一般是由程序员分配释放，若程序员不释放的话，程序结束时可能由 OS 回收，值得注意的是它与数据结构的堆是两回事，分配方式倒是类似于数据结构的链表。

 全局区(static)：也叫静态数据内存空间，存储全局变量和静态变量， 全局变量和静态变量的存储是放一块的，初始化的全局变量和静态变量放一块区域，没有初始化的在相邻的另一块区域，程序结束后由系统释放。

 文字常量区：常量字符串就是放在这里，程序结束后由系统释放。

 程序代码区：存放函数体的二进制代码。
 
 oc内存结构：
 代码段：执行代码的一块区域
 数据段：已初始化的全局变量和静态变量
 BSS段：存放未初始化的全局变量和静态变量
 堆区
 栈区，
 内核
 
 野指针错误：访问了一块坏的内存（已经被回收的，不可用的内存）。

 僵尸对象：所占内存已经被回收的对象，僵尸对象不能再被使用。（打开僵尸对象检测）

 空指针：没有指向任何东西的指针（存储的东西是0,null，nil），给空指针发送消息不会报错
 */
