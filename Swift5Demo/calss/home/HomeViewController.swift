//
//  HomeViewController.swift
//  Swift5Demo
//
//  Created by Êù®Ê∞∏ on 2019/9/24.
//  Copyright ¬© 2019 com.ayong.myapp. All rights reserved.
//

import UIKit
import MBProgressHUD

//ËøêÁÆóÁ¨¶ÈáçËΩΩ
infix operator !!
func !! <T>(wrapped: T?, failureText: @autoclosure () -> String) -> T {
    if let x = wrapped { return x }
    fatalError(failureText())
}
//

infix operator **
func ** (x: Double, y: Double) -> Double {
    return pow(x, y)
}


struct Point {
    var x: Double
    var y: Double
    private(set) lazy var distanceFromOrigin: Double
        = (x*x + y*y).squareRoot()
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }
}


class HomeViewController: UIViewController {
    
    let people = [
        Person(first: "Emily", last: "Young", yearOfBirth: 2002),
        Person(first: "David", last: "Gray", yearOfBirth: 1991),
        Person(first: "Robert", last: "Barnes", yearOfBirth: 1985),
        Person(first: "Ava", last: "Barnes", yearOfBirth: 2000),
        Person(first: "Joanne", last: "Miller", yearOfBirth: 1994),
        Person(first: "Ava", last: "Barnes", yearOfBirth: 1998),
    ]
    
    let combined: SortDescriptor<Person> = combine(
        sortDescriptors: [sortByFirstName, sortByLastName,sortByYear]
    )
    
    var point: Point!
    var age: Int?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //Êñ∞Êï∞ÁªÑÈ°∫Â∫èÊîπÂèòÔºåpeopleÊ≤°Âèò
        //        let arr = people.sorted(by: combined)
        //        arr.map { people in
        //            print(people.first + people.last + "\(people.yearOfBirth)")
        //        }
        //        let a = 2 ** 2
        //        print(a)
        //        //lazy
        //        point = Point(x: 3, y: 4)
        //        print(point.distanceFromOrigin)
        //        point.x += 10
        //        print(point.distanceFromOrigin)
        //
        //
        //        var immutablePoint = Point(x: 3, y: 4)
        //        print(immutablePoint.distanceFromOrigin)
        //
        //
        //        let person = Person(first: "Ava", last: "Barnes", yearOfBirth: 1998)
        //        let textField = TextField()
        //        person.bind(\.name, to: textField, \.text)
        //        person.name = "John"
        //        print( textField.text)
        //        textField.text = "Sarah"
        //        print(person.name)
        //
        //
        //        //ËøôÊòØÂè¶‰∏ÄÁßçÂΩ¢ÂºèÁöÑÁü≠Ë∑ØÊ±ÇÂÄºÔºöÁ¨¨‰∫å‰∏™Êù°‰ª∂Âè™ÊúâÂú®Á¨¨‰∏Ä‰∏™Êù°‰ª∂ÊàêÂäüÂêéÔºåÊâç‰ºöËøõË°åÂà§Êñ≠„ÄÇ
        //        if let first = age, first > 10{
        //            // ÊâßË°åÊìç‰Ωú
        //        }
        //        age = 10
        //        if and((age != nil), {age! > 10}) {
        //            print("age")
        //        }
        //
        //        if and1(age != nil, age! > 10) {
        //            print("age1")
        //        }
        //
        //        _ = transform(10, with: nil) // ‰ΩøÁî®ÂèØÈÄâÂÄºÈáçËΩΩ
        //        _ = transform1(10) { $0 * $0 } // ‰ΩøÁî®ÈùûÂèØÈÄâÂÄºÈáçËΩΩ
        //        _ = transform2(10, with: {
        //            $0 * $0
        //        })
        
        
        split()
        
    }
    
    func and(_ l: Bool, _ r: () -> Bool) -> Bool {
        guard l else { return false }
        return r()
    }
    
    
    //@autoclosure Ëá™Âä®ÊÄßÈó≠ÂåÖ Ê†áÊ≥®Êù•ÂëäËØâÁºñËØëÂô®ÂÆÉÂ∫îËØ•Â∞Ü‰∏Ä‰∏™ÁâπÂÆöÁöÑÂèÇÊï∞Áî®Èó≠ÂåÖË°®ËææÂºèÂåÖË£ÖËµ∑Êù•
    func and1(_ l: Bool, _ r: @autoclosure () -> Bool) -> Bool {
        guard l else { return false }
        return r()
    }
    
    //@escaping ÈÄÉÈÄ∏Èó≠ÂåÖ
    //‚ÄúÂ¶ÇÊûúÈó≠ÂåÖË¢´Â∞ÅË£ÖÂà∞ÂÉèÊòØÂÖÉÁªÑÊàñËÄÖÂèØÈÄâÂÄºÁ≠âÁ±ªÂûãÁöÑËØùÔºåËøô‰∏™Èó≠ÂåÖÂèÇÊï∞‰πüÊòØÈÄÉÈÄ∏ÁöÑ„ÄÇÂõ†‰∏∫Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÈó≠ÂåÖ‰∏çÊòØÁõ¥Êé•ÂèÇÊï∞ÔºåÂÆÉÂ∞ÜËá™Âä®Âèò‰∏∫ÈÄÉÈÄ∏Èó≠ÂåÖ
    func transform(_ input: Int, with f: ((Int) -> Int)?) -> Int {
        print("‰ΩøÁî®ÂèØÈÄâÂÄºÈáçËΩΩ")
        guard let f = f else { return input }
        return f(input)
    }
    
    func transform1(_ input: Int, with f: (Int) -> Int) -> Int {
        print("‰ΩøÁî®ÈùûÂèØÈÄâÂÄºÈáçËΩΩ")
        return f(input)
    }
    
    func transform2(_ input: Int, with f: @escaping (Int) -> Int) -> Int {
        print("‰ΩøÁî®ÈùûÂèØÈÄâÂÄºÈáçËΩΩ transform2")
        return f(input)
    }
    
    //‚ÄúÁªìÊûÑ‰ΩìÊòØÂÄºÁ±ªÂûãÔºåÁ±ªÊòØÂºïÁî®Á±ªÂûã‚Äù
    //‰Ωú‰∏∫ inout ÂèÇÊï∞‰º†ÈÄíÁöÑÂèòÈáèÂøÖÈ°ªÊòØÁî® var ÂÆö‰πâÁöÑÔºõÂÖ∂Ê¨°ÔºåÂΩìÊääËøô‰∏™ÂèòÈáè‰º†ÈÄíÁªôÂáΩÊï∞Êó∂ÔºåÂøÖÈ°ªÂú®ÂèòÈáèÂêçÂâçÂä†‰∏ä & Á¨¶Âè∑„ÄÇ‚Äù
    
    //& Á¨¶Âè∑ÂèØËÉΩ‰ºöËÆ©‰Ω†ÊÉ≥Ëµ∑ C Âíå Objective-c ‰∏≠ÁöÑÂèñÂùÄÊìç‰ΩúÁ¨¶ÔºåÊàñËÄÖÊòØ C++ ‰∏≠ÁöÑÂºïÁî®‰º†ÈÄíÊìç‰ΩúÁ¨¶Ôºå‰ΩÜÂú® Swift ‰∏≠ÔºåÂÖ∂‰ΩúÁî®ÊòØ‰∏ç‰∏ÄÊ†∑ÁöÑ„ÄÇÂ∞±ÂÉèÂØπÂæÖÊôÆÈÄöÁöÑÂèÇÊï∞‰∏ÄÊ†∑ÔºåSwift ËøòÊòØ‰ºöÂ§çÂà∂‰º†ÂÖ•ÁöÑ inout ÂèÇÊï∞Ôºå‰ΩÜÂΩìÂáΩÊï∞ËøîÂõûÊó∂Ôºå‰ºöÁî®Ëøô‰∫õÂèÇÊï∞ÁöÑÂÄºË¶ÜÁõñÂéüÊù•ÁöÑÂÄº„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÂç≥‰ΩøÂú®ÂáΩÊï∞‰∏≠ÂØπ‰∏Ä‰∏™ inout ÂèÇÊï∞ÂÅöÂ§öÊ¨°‰øÆÊîπÔºå‰ΩÜÂØπË∞ÉÁî®ËÄÖÊù•ËØ¥Âè™‰ºöÊ≥®ÊÑèÂà∞‰∏ÄÊ¨°‰øÆÊîπÁöÑÂèëÁîüÔºå‰πüÂ∞±ÊòØÂú®Áî®Êñ∞ÁöÑÂÄºË¶ÜÁõñÂéüÊúâÂÄºÁöÑÊó∂ÂÄô„ÄÇÂêåÁêÜÔºåÂç≥‰ΩøÂáΩÊï∞ÂÆåÂÖ®Ê≤°ÊúâÂØπ inout ÂèÇÊï∞ÂÅö‰ªª‰ΩïÁöÑ‰øÆÊîπÔºåË∞ÉÁî®ËÄÖ‰πüËøòÊòØ‰ºöÊ≥®ÊÑèÂà∞‰∏ÄÊ¨°‰øÆÊîπ (willSet Âíå didSet Ëøô‰∏§‰∏™ËßÇÂØüËÄÖÊñπÊ≥ïÈÉΩ‰ºöË¢´Ë∞ÉÁî®)
    //‚ÄúÁªìÊûÑ‰ΩìÊòØÂÄºÁ±ªÂûãÔºåÊâÄ‰ª•Âú®ÁªìÊûÑ‰Ωì‰πãÈó¥ÊòØ‰∏ç‰ºö‰∫ßÁîüÂæ™ÁéØÂºïÁî®ÁöÑ (Âõ†‰∏∫‰∏çÂ≠òÂú®ÂØπÁªìÊûÑ‰ΩìÁöÑÂºïÁî®)„ÄÇËøôÂç≥ÊòØ‰ºòÂäøÂèàÊòØÈôêÂà∂Ôºö‰∏ÄÊñπÈù¢Êàë‰ª¨ÂèØ‰ª•Â∞ëÊãÖÂøÉ‰∏Ä‰ª∂‰∫ãÔºå‰ΩÜÂêåÊó∂‰πüÊÑèÂë≥ÁùÄÊó†Ê≥ïÁî®ÁªìÊûÑ‰ΩìÂÆûÁé∞Âæ™ÁéØÊï∞ÊçÆÁªìÊûÑ
    
    //Ë¶ÅÂÖ±‰∫´‰∏Ä‰∏™ÂÆû‰æãÁöÑÊâÄÊúâÊùÉÁöÑËØùÔºåÊàë‰ª¨ÂøÖÈ°ª‰ΩøÁî®Á±ª„ÄÇÂê¶ÂàôÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®ÁªìÊûÑ‰Ωì‚Äù
    
    //Êûö‰∏æÂèØ‰ª•ÊúâÊñπÊ≥ïÔºåËÆ°ÁÆóÂ±ûÊÄßÂíå‰∏ãÊ†áÊìç‰Ωú„ÄÇÊñπÊ≥ïÂèØ‰ª•Ë¢´Â£∞Êòé‰∏∫ÂèØÂèòÊàñ‰∏çÂèØÂèò„ÄÇ‰Ω†ÂèØ‰ª•‰∏∫Êûö‰∏æÂÆûÁé∞Êâ©Â±ï„ÄÇ Êûö‰∏æÂèØ‰ª•ÂÆûÁé∞ÂêÑÁßçÂçèËÆÆ
    
    
    func split() {
        //        let s = """
        //                String Êúâ‰∏Ä‰∏™ÁâπÂÆöÁöÑ SubSequence Á±ªÂûãÔºåÂè´ÂÅö Substring„ÄÇSubstring ÂíåArraySlice ÂæàÁõ∏‰ººÔºö
        //                ÂÆÉÊòØ‰∏Ä‰∏™‰ª•ÂéüÂßãÂ≠óÁ¨¶‰∏≤ÂÜÖÂÆπ‰∏∫Âü∫Á°ÄÔºåÁî®‰∏çÂêåËµ∑ÂßãÂíåÁªìÊùü‰ΩçÁΩÆÊ†áËÆ∞ÁöÑËßÜÂõæ„ÄÇ
        //                Â≠êÂ≠óÁ¨¶‰∏≤ÂíåÂéüÂ≠óÁ¨¶‰∏≤ÂÖ±‰∫´ÊñáÊú¨Â≠òÂÇ®ÔºåËøôÂ∏¶Êù•ÁöÑÂ∑®Â§ßÁöÑÂ•ΩÂ§ÑÔºåÂ∞±ÊòØËÆ©ÂØπÂ≠óÁ¨¶‰∏≤ÂàáÁâáÊàê‰∏∫‰∫ÜÈùûÂ∏∏È´òÊïàÁöÑÊìç‰Ωú
        //                """
        //        let sub = s.split(separator: "„ÄÇ")
        //        print(sub)
        
        
        let text = "üëâ Click here for more info."
        let linkTarget =
            URL(string: "https://www.baidu.com")!
        // Â∞ΩÁÆ°‰ΩøÁî®‰∫Ü `let`ÔºåÂØπË±°‰æùÁÑ∂ÊòØÂèØÂèòÁöÑ (ÂºïÁî®ËØ≠‰πâ)
        let formatted = NSMutableAttributedString(string: text)
        // ‰øÆÊîπÊñáÊú¨ÁöÑÈÉ®ÂàÜÂ±ûÊÄß
        if let linkRange = formatted.string.range(of: "Click here") {
            // Â∞Ü Swift ËåÉÂõ¥ËΩ¨Êç¢‰∏∫ NSRange
            // Ê≥®ÊÑèËåÉÂõ¥ÁöÑËµ∑ÂßãÂÄº‰∏∫ 3ÔºåÂõ†‰∏∫ÊñáÊú¨ÂâçÈù¢ÁöÑÈ¢úÊñáÂ≠óÊó†Ê≥ïÂú®Âçï‰∏™ UTF-16 ÁºñÁ†ÅÂçïÂÖÉ‰∏≠Ë¢´Ë°®Á§∫
            let nsRange = NSRange(linkRange, in: formatted.string) // {3, 10}
            // Ê∑ªÂä†Â±ûÊÄß
            formatted.addAttribute(.link, value: linkTarget, range: nsRange)
        }
        
        
        let lab = UILabel()
        lab.attributedText = formatted
        lab.isUserInteractionEnabled = true
        lab.textColor = .black
        
        lab.frame = CGRect(x: 0, y: 100, width: 300, height: 30)
        view.addSubview(lab)
    }
    
    
}

extension HomeViewController: UITextViewDelegate {
    func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange, interaction: UITextItemInteraction) -> Bool {
        
        return false
    }
}





